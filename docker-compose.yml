x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.2}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: a_very_secure_key
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - etl


  airflow-webserver:
    <<: *airflow-common
    command: 
      - webserver
    entrypoint: ['/opt/airflow/scripts/airflowwebserver_startup.sh']
    ports:
      - "8080:8080"
    volumes:
      - ./scripts/airflowwebserver_startup.sh:/opt/airflow/scripts/airflowwebserver_startup.sh
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    entrypoint: ['/opt/airflow/scripts/airflowscheduler_startup.sh']
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    # environment:
    #   - JAVA_HOME=/spark/jdk-11.0.2   Couldnt add env var here as the container gives errors for some reason
    volumes:
      - ./main:/opt/airflow/main
      - ~/spark/jdk-11.0.2:/spark/jdk-11.0.2
      - ./others:/opt/airflow/main/others
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./keys/sa_adminadmin.json:/opt/airflow/main/keys/sa_adminadmin.json
      - ./requirements/docker_airflowscheduler_req.txt:/opt/airflow/requirements/docker_airflowscheduler_req.txt
      - ./scripts/airflowscheduler_startup.sh:/opt/airflow/scripts/airflowscheduler_startup.sh
      - ./.env:/opt/airflow/.env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl
  

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - mkdir -p /sources/logs /sources/dags
      - chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags}
      - exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - etl

networks:
    etl:
